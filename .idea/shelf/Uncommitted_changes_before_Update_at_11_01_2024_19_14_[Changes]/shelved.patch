Index: app/src/main/java/com/example/mysecondappl/pathsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mysecondappl\r\n\r\nclass pathsActivity {\r\n}
===================================================================
diff --git a/app/src/main/java/com/example/mysecondappl/pathsActivity.kt b/app/src/main/java/com/example/mysecondappl/pathsActivity.kt
--- a/app/src/main/java/com/example/mysecondappl/pathsActivity.kt	
+++ b/app/src/main/java/com/example/mysecondappl/pathsActivity.kt	
@@ -1,4 +1,114 @@
 package com.example.mysecondappl
 
-class pathsActivity {
-}
\ No newline at end of file
+import android.app.Activity
+import android.app.NotificationChannel
+import android.app.NotificationManager
+import android.app.PendingIntent
+import android.content.Context
+import android.content.Intent
+import android.os.Build
+import android.os.Bundle
+import android.util.Log
+import android.widget.Button
+import androidx.activity.result.ActivityResultLauncher
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.appcompat.app.AppCompatActivity
+import androidx.core.app.NotificationCompat
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.example.mylibrary.Path
+import com.example.mysecondappl.databinding.ActivityPathsBinding
+
+class PathsActivity : AppCompatActivity() {
+    private lateinit var binding: ActivityPathsBinding
+    private var getContent: ActivityResultLauncher<Intent>? = null
+    lateinit var app: MyApplication
+    private lateinit var adapter:PathsAdapter
+    companion object {
+        const val CHANNEL_ID="com.um.feri.cs.pora.kotlinnotification" //my channel id
+        const val TIME_ID="TIME_ID"
+        private var notificationId=0
+        fun getNotificationUniqueID():Int {
+            return notificationId++;
+        }
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        app = application as MyApplication
+        binding = ActivityPathsBinding.inflate(layoutInflater)
+        setContentView(binding.root)
+        val exitButton: Button = binding.exitPaths
+        val mapsButton: Button = binding.mapsButton
+        val inputButton: Button = binding.inputButton
+
+        val recyclerView: RecyclerView=binding.recyclerview
+        recyclerView.layoutManager = LinearLayoutManager(this)
+        adapter= PathsAdapter(app)
+        recyclerView.adapter=adapter
+
+        exitButton.setOnClickListener {
+            Log.d("PathsActivity", "sendNotification called")
+
+            finish()
+        }
+        mapsButton.setOnClickListener {
+
+        }
+        inputButton.setOnClickListener {
+            onOpenSecondActivity()
+        }
+        getContent =
+            registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
+                if (result.resultCode == Activity.RESULT_OK) {
+                    val data: Intent? = result.data
+                    val pathLoc = data?.getStringExtra("pathLocation")
+                    val pathDifStr = data?.getStringExtra("pathDifficulty")
+                    val pathName = data?.getStringExtra("pathName")
+                    val pathDurStr = data?.getStringExtra("pathDuration")
+                    val pathDur = pathDurStr?.toInt()
+                    val pathDif = pathDifStr?.toInt()
+                    if (pathName != null && pathDif != null && pathLoc != null && pathDur != null) {
+                        val path = Path(pathName, pathDif, pathLoc, pathDur)
+                        app.pathsList.addPath(path)
+                    }
+                }
+
+            }
+
+
+    } fun onOpenSecondActivity() {
+        Log.d("s","${app.pathsList.size()}")
+        val intent = Intent(this, InputActivity::class.java)
+        getContent?.launch(intent)
+    }
+    private fun createNotificationChannel() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            val name = "MyTestChannel"
+            val descriptionText = "Testing notifications"
+            val importance = NotificationManager.IMPORTANCE_DEFAULT
+            val channel = NotificationChannel(PathsActivity.CHANNEL_ID, name, importance).apply {
+                description = descriptionText
+            }
+            // Register the channel with the system
+            val notificationManager: NotificationManager =
+                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+            notificationManager.createNotificationChannel(channel)
+        }
+    }
+
+    private fun createNotify(title: String, content: String, imageId:Int) {
+        var builder = NotificationCompat.Builder(this, CHANNEL_ID)
+            .setSmallIcon(imageId)
+            .setContentTitle(title)
+            .setContentText(content)
+            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
+        val notificationManager: NotificationManager =
+            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+        notificationManager.notify(Pat.getNotificationUniqueID(),builder.build())
+    }
+
+
+
+
+}
